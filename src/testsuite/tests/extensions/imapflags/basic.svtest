require "vnd.dovecot.testsuite";

require "imap4flags";
require "relational";
require "variables";
require "comparator-i;ascii-numeric";

test "Hasflag empty" {
	if hasflag "\\Seen" {
		test_fail "hasflag sees flags were there should be none";
	}

	if hasflag :count "ge" "1" {
		test_fail "hasflag sees flags were there should be none";
	}
}

test "Setflag; Hasflag one" {
	setflag "\\seen";

	if not hasflag "\\Seen" {
		test_fail "flag not set of hasflag fails to see it";
	}

	if not hasflag :count "eq" "1" {
		test_fail "flag not set of hasflag fails to see it";
	}

	if hasflag "$Nonsense" {
		test_fail "hasflag sees other flag that the one set";
	}
}

/*
 * RFC examples
 */ 


test "RFC hasflag example - :is" {
	setflag "A B";

	if not hasflag ["b","A"] {
		test_fail "list representation did not match";
	}
 
	if not hasflag :is "b A" {
		test_fail "string representation did not match";
	}
}

test "RFC hasflag example - :contains variable" {
	set "MyVar" "NonJunk Junk gnus-forward $Forwarded NotJunk JunkRecorded $Junk $NotJunk";

	if not hasflag :contains "MyVar" "Junk" {
		test_fail "failed true example 1";
	}

    if not hasflag :contains "MyVar" "forward" {
		test_fail "failed true example 2";
	}
      
	if not hasflag :contains "MyVar" ["label", "forward"] {
		test_fail "failed true example 3";
	}
     
	if not hasflag :contains "MyVar" ["junk", "forward"] {
		test_fail "failed true example 4";
	}

	if not hasflag :contains "MyVar" "junk forward" {
		test_fail "failed true example 4 (rewrite 1)";
	}

    if not hasflag :contains "MyVar" "forward junk" {
		test_fail "failed true example 4 (rewrite 2)";
	}

	if hasflag :contains "MyVar" "label" {
		test_fail "failed false example 1";
	}

	if hasflag :contains "MyVar" ["label1", "label2"] {
		test_fail "failed false example 2";
	}
}

test "RFC hasflag example - :count variable" {
	set "MyFlags" "A B";
	if not hasflag :count "ge" :comparator "i;ascii-numeric" "MyFlags" "2" {
		test_fail "failed count \"ge\" comparison";
	}
}
