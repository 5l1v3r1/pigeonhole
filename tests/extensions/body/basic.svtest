require "vnd.dovecot.testsuite";
require "relational";
require "comparator-i;ascii-numeric";

require "body";

test_set "message" text:
From: stephan@rename-it.nl
To: tss@iki.fi
Subject: Test message.

Test!

.
;

/* Empty line
 * 
 *  RFC 5173: 
 *    'The body test matches content in the body of an email message, that
 *     is, anything following the first empty line after the header.  (The
 *     empty line itself, if present, is not considered to be part of the
 *     body.)'
 */
test "The empty line" {

	if not body :raw :is text:
Test!

.
	{
		test_fail "invalid message body extracted";
	}

	if body :raw :is text:

Test!

.
	{
		test_fail "invalid message body extracted";
	}

	if body :raw :is "Test"
	{
		test_fail "body test matches nonsense";
	}
}

/* Default comparator and match type
 *
 *  RFC 5173:
 *    'The COMPARATOR and MATCH-TYPE keyword parameters are defined in
 *     [SIEVE].  As specified in Sections 2.7.1 and 2.7.3 of [SIEVE], the
 *     default COMPARATOR is "i;ascii-casemap" and the default MATCH-TYPE is
 *     ":is".'
 */

test "Defaults" {
	if anyof ( body :raw "Test", body :raw "*Test*" ) {
		test_fail "default match type is not :is as is required";
	}

	if allof( not body :raw :contains "tesT", body :raw :contains "Test" ) {
		test_fail "default comparator is not i;ascii-casemap as is required";
	}
}

/* No body
 *
 *  RFC 5173:
 *    'If a message consists of a header only, not followed by an empty line, 
 *     then that set is empty and all "body" tests return false, including 
 *     those that test for an empty string.  (This is similar to how the 
 *     "header" test always fails when the named header fields aren't present.)'
 */

test_set "message" text:
From: stephan@rename-it.nl
To: tss@iki.fi
Subject: No body is here!
.
;

test "No body" {
	if body :raw :contains "" {
		test_fail "matched against non-existant body (:contains \"\")";
	}

	if body :raw :is "" {
		test_fail "matched against non-existant body (:is \"\")";
	}

	if body :raw :matches "*" {
		test_fail "matched against non-existant body (:matches \"*\")";
	}
}

/*
 *
 */

test_set "message" text:
From: Whomever <whomever@domain.dom>
To: Someone <someone@domain.com>
Date: Fri, 08 Aug 2008 10:14:34 -0700
Subject: whatever
Content-Type: multipart/mixed; boundary=outer

This is a multi-part message in MIME format.

--outer
Content-Type: multipart/alternative; boundary=inner

This is a nested multi-part message in MIME format.

--inner
Content-Type: text/plain; charset="us-ascii"

Hello

--inner
Content-Type: text/html; charset="us-ascii"

<html><body>Hello</body></html>

--inner--

This is the end of the inner MIME multipart.

--outer
Content-Type: message/rfc822
From: Someone Else <someone.else@domain.dom>
Subject: hello request

Please say Hello

--outer--

This is the end of the outer MIME multipart.
.
;

test "RFC nested example - :content \"text\"" {
	if not body :content "text" :contains "html" {
		test_fail "failed to acquire nested MIME body part (1)";	
	}

	if not body :content "text/html" :contains "hello" {
		test_fail "failed to acquire nested MIME body part (2)";	
	}
	
	if not body :content "text/plain" :contains "hello" {
        test_fail "failed to acquire nested MIME body part (3)";
    }

	if not body :content "text" :contains "hello" {
        test_fail "failed to acquire nested MIME body part (4)";
    }

/* FIXME: fails
	if not body :content "text" :count "eq" :comparator "i;ascii-numeric" "2" {
		test_fail "matched wrong number of \"text/*\" body parts";
	}*/
}

/* FIXME: fails
test "RFC nested example - :content \"multipart\"" {
	if not body :content "multipart" :contains
		"This is a multi-part message in MIME format" {
		test_fail "missed first multipart body part";
	}

	if not body :content "multipart" :contains
		"This is a nested multi-part message in MIME format" {
		test_fail "missed second multipart body part";
	}
	
	if not body :content "multipart" :contains
		"This is the end of the inner MIME multipart" {
		test_fail "missed third multipart body part";
	}

	if not body :content "multipart" :contains
		"This is the end of the outer MIME multipart." {
		test_fail "missed fourth multipart body part";
	}	
}*/
