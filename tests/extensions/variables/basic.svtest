require "vnd.dovecot.testsuite";
require "variables";

test_set "message" text:
From: stephan@rename-it.nl
To: test@example.com
Subject: Variables test

Testing variables...
.
;

/*
 * Substitution syntax
 */

test "Unknown variables" {
	set "q" "a";
	set "qw" "bb";
	set "qwe" "ccc";
	set "qwer" "dddd";
	set "qwert" "ccc";

	if not string "[${qwerty}]" "[]" {
		test_fail "unknown variable not substituted with empty string";
	}
}

test "One pass" {
	set "something" "value";
	set "s" "$";
	
	if string "${s}{something}" "value" {
		test_fail "somehow variable string is scanned multiple times";
	}

	if not string :matches "${s}{something}" "?{something}" {
		test_fail "unexpected result";
	}
}

test "Syntax errors" {
	set "s" "$";
	set "variable" "nonsense";

	if anyof ( 
		not string "$" "${s}",
		not string "${" "${s}{",
		not string "${a" "${s}{a",
		not string "${$}" "${s}{$}",
		not string "${%%%%}" "${s}{%%%%}" )
	{
		test_fail "variables substitution changed substring not matching variable-ref";
	}	
}

/*
 * Variable assignments
 */

test "Basic assignment" {
	set "test" "Value";

	if not string :is "${test}" "Value" {
		test_fail "variable assignment failed";
	}

	if string :is "${test}" "value" {
		test_fail "string test failed";
	}
}

test "Assignment overwritten" {
	set "test" "Value";
	set "test" "More";

	if not string :is "${test}" "More" {
		test_fail "variable assignment failed";
	}

	if string :is "${test}" "Value" {
		test_fail "value not overwritten";
	}

	if string :is "${test}" "nonsense" {
		test_fail "string test failed";
	}
}

test "Two assignments" {
	set "test" "Value";
	set "test2" "More";

	if not string :is "${test}" "Value" {
		test_fail "variable assignment failed";
	}

	if string :is "${test}" "More" {
		test_fail "assignments to different variables overlap";
	}

	if string :is "${test}" "nonsense" {
		test_fail "string test failed";
	}
}

test "Variables case-insensitive" {
	set "VeRyElAboRATeVaRIABLeName" "interesting value";

	if not string "${veryelaboratevariablename}" "interesting value" {
		test_fail "variable names are case sensitive (lower case try)";
	}

	if not string "${VERYELABORATEVARIABLENAME}" "interesting value" {
		test_fail "variable names are case sensitive (upper case try)";
	}
}

/*
 * Modifiers
 */

test "Modifier :lower" {
	set :lower "test" "VaLuE";

	if not string :is "${test}" "value" {
		test_fail "modified variable assignment failed";
	}
}

test "Modifiers :lower :upperfirst" {
	set :lower :upperfirst "test" "vAlUe";

	if string :is "${test}" "value" {
		test_fail "modifiers applied with wrong precedence";
	}

	if not string :is "${test}" "Value" {
		test_fail "modified variable assignment failed";
	}
}

test "Modifiers :upperfirst :lower" {
	set :upperfirst :lower "test" "vAlUe";

	if string :is "${test}" "value" {
		test_fail "modifiers applied with wrong precedence";
	}

	if not string :is "${test}" "Value" {
		test_fail "modified variable assignment failed";
	}
}

test "Modifier :upper" {
	set :upper "test" "vAlUe";

	if not string :is "${test}" "VALUE" {
		test_fail "modified variable assignment failed";
	}
}

test "Modifiers :upper :lowerfirst" {
	set :upper :lowerfirst "test" "VaLuE";

	if string :is "${test}" "VALUE" {
		test_fail "modifiers applied with wrong precedence";
	}

	if not string :is "${test}" "vALUE" {
		test_fail "modified variable assignment failed";
	}
}

test "Modifiers :lowerfirst :upper" {
	set :lowerfirst :upper "test" "VaLuE";

	if string :is "${test}" "VALUE" {
		test_fail "modifiers applied with wrong precedence";
	}

	if not string :is "${test}" "vALUE" {
		test_fail "modified variable assignment failed";
	}
}

test "Modifier :length" {
	set :length "test" "VaLuE";

	if not string :is "${test}" "5" {
		test_fail "modified variable assignment failed";
	}
}

test "Modifier :length (elaborate)" {
	set "a" "abcdefghijklmnopqrstuvwxyz";
	set "b" "1234567890";
	set :length "test" " ${a}:${b}  ";

	if not string :is "${test}" "40" {
		test_fail "modified variable assignment failed";
	}
}

test "Modifier :quotewildcard" {
	set :quotewildcard "test" "^^***??**^^";

	if not string :is "${test}" "^^\\*\\*\\*\\?\\?\\*\\*^^" {
		test_fail "modified variable assignment failed";
	}
}

test "Modifier :length :quotewildcard" {
	set :length :quotewildcard "test" "^^***??**^^";

	if string :is "${test}" "11" {
		test_fail "modifiers applied with wrong precedence";
	}

	if not string :is "${test}" "18" {
		test_fail "modified variable assignment failed";
	}
}

/*
 * Variable substitution
 */

test "Multi-line string substitution" {
	set "name" "Stephan Bosch";
	set "address" "stephan@rename-it.nl";
	set "subject" "Test message";
	
	set "message" text: # Message with substitutions
From: ${name} <${address}>
To: Bertus van Asseldonk <b.vanasseldonk@hetkennet.nl>
Subject: ${subject}

This is a test message.
.
;
	if not string :is "${message}" text:
From: Stephan Bosch <stephan@rename-it.nl>
To: Bertus van Asseldonk <b.vanasseldonk@hetkennet.nl>
Subject: Test message

This is a test message.
.
	{
		test_fail "variable substitution failed";
	}
}

test "Multiple substitutions" {
	set "a" "the monkey";
	set "b" "a nut";
	set "c" "the fish";
	set "d" "on fire";
	set "e" "eats";
	set "f" "is";

	if not string :is "${a} ${e} ${b}" "the monkey eats a nut" {
		test_fail "variable substitution failed (1)";
	}

	if not string :is "${c} ${f} ${d}" "the fish is on fire" {
		test_fail "variable substitution failed (2)";
	}

	set :upperfirst "sentence" "${a} ${e} ${b}";

	if not string :is "${sentence}" "The monkey eats a nut" {
		test_fail "modified variable substitution failed";
	}	
}


